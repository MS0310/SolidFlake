{
	"info": {
		"_postman_id": "6733fcb2-49e6-4106-836f-dc31d07294ce",
		"name": "Chapter1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateCollectiions",
			"item": [
				{
					"name": "ManualGetReqAssert",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b19a9b4d-0270-4300-8c79-e66f79c3a4f5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"location_type\");",
									"    pm.expect(pm.response.text()).to.include(\"woeid\");",
									"    pm.expect(pm.response.text()).to.include(\"latt_long\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Check response value\", function () {",
									"      var jsonData = pm.response.json();",
									"      var titleVar1 = jsonData.title;",
									"      var titleVar2 = \"London\";",
									"      if(pm.expect(titleVar1).equal(titleVar2 + \"Does not match with expected value \" + titleVar2)){",
									"            //console.log(jsonData.title);",
									"            console.log(\"Expected value is \" + titleVar2 + \" :Value received was: \" + titleVar1 + \" <<Test Passed>>\");",
									"      }",
									"      ",
									"});",
									"",
									"/*",
									"pm.test(\"expected 44418 at woeid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(woeid).to.eql(44418);",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.metaweather.com/api/location/search/?query=london",
							"protocol": "https",
							"host": [
								"www",
								"metaweather",
								"com"
							],
							"path": [
								"api",
								"location",
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "london"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Variables",
			"item": [
				{
					"name": "GetSetGlobalsEnv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35647ec5-5200-444a-b457-41178c3a16ff",
								"exec": [
									"",
									"// getting  global variables",
									"var globalvar1 = pm.globals.get(\"gVar1\");",
									"console.log(globalvar1);",
									"",
									"// setting second global variables",
									"var globalvar3 = pm.globals.get(\"gVar2\");",
									"console.log(\"Second Global variable value is \" + globalvar3);",
									"",
									"",
									"pm.globals.set(\"gVar2\",\"updatedval\");",
									"var globalvar3 =  pm.globals.get(\"gVar2\");",
									"console.log(\"Setting Second Global variable value to \" + globalvar3);",
									"",
									"// get an Enviornment variable ",
									"",
									"console.log(pm.environment.get(\"url\"));",
									"",
									"// set an enviornment variable",
									"",
									"pm.environment.set(\"Env\", \"updatedEnvVal\");",
									"var envVar = pm.environment.get(\"Env\");",
									"console.log(envVar);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/location/search/?query=london",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"location",
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "london"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Environments",
			"item": [
				{
					"name": "ChainingReq1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ad0e52b-8236-4b00-a698-74362d65aa63",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"var value1 = jsonData[0].woeid;",
									"console.log(value1);",
									"",
									"//set env variable ",
									"",
									"pm.environment.set(\"woeid\", value1);",
									"",
									"console.log(pm.environment.get(\"woeid\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Title Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedTitle = jsonData[0].title;",
									"    var actualTitle = \"london\";",
									"pm.expect(expectedTitle).equal(actualTitle, \"Title Validtion match failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.metaweather.com/api/location/search/?query=london",
							"protocol": "https",
							"host": [
								"www",
								"metaweather",
								"com"
							],
							"path": [
								"api",
								"location",
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "london"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ChainingReq2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a2cfa3d-5e25-406f-8238-163da4678975",
								"exec": [
									"/* pre- condition: ",
									"      1. Create \"Chaining Enviornment\" and select the enviornment .",
									"      2. Under Above Enviornment, add a variable name \"woeid\" with value = 44418",
									"",
									"*/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response value\", function () {",
									"      var jsonData = pm.response.json();",
									"      var titleVar1 = jsonData.title;",
									"      var titleVar2 = \"London\";",
									"      if(pm.expect(titleVar1).equal(titleVar2, \"Does not match with expected value \" + titleVar2)){",
									"            //console.log(jsonData.title);",
									"            console.log(\"Expected value is \" + titleVar2 + \" :Value received was: \" + titleVar1 + \" <<Test Passed>>\");",
									"      }",
									"      ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.metaweather.com/api/location/{{woeid}}",
							"protocol": "https",
							"host": [
								"www",
								"metaweather",
								"com"
							],
							"path": [
								"api",
								"location",
								"{{woeid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TestScriptsCreation",
			"item": [
				{
					"name": "AssertGetRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2eefef64-e155-492f-a3a4-87d582438409",
								"exec": [
									"",
									"// declare a variable",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// storing value in variable var1",
									"var var1 = jsonData[0].title;",
									"var var2 = jsonData[0].woeid;",
									"",
									"// Display the value of variable in Console",
									"console.log(var1);",
									"console.log(var2);",
									"",
									"// Asserting woeid value ",
									"",
									"pm.test(\"Asserting woeid value \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].woeid).to.eql(44418);",
									"    console.log();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.metaweather.com/api/location/search/?query=london",
							"protocol": "https",
							"host": [
								"www",
								"metaweather",
								"com"
							],
							"path": [
								"api",
								"location",
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "london"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AssertPutRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e64aa4fd-f7fc-4218-99d4-f142d5e9a265",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"var recvdlVar1 = jsonData.job;",
									"",
									"console.log(recvdlVar1);",
									"",
									"expectedVal1=\"zion resident\";",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    if (pm.expect(recvdlVar1).equal(expectedVal1 , \"Not Matched with \" + expectedVal1))",
									"    {",
									"        console.log(\" ExpectedVal1 is \" + expectedVal1 + \" value recieved is \" + recvdlVar1 + \" Pass \")",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "AssertPostRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca87e9b9-155a-426d-b1e4-b05f39a9ed50",
								"exec": [
									"",
									"",
									"var jsonData = pm.response.json();",
									"Actualvalue1 = jsonData.name;",
									"console.log(Actualvalue1);",
									"",
									"pm.test(\"Names Validation\", function () {",
									"    var ExpectedValue1 = \"morpheus\";",
									"pm.expect(ExpectedValue1).equal(Actualvalue1, \"Names Validtion match\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DataDrivenTest",
			"item": [
				{
					"name": "Pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c36a900-2078-4d5d-a927-99bbe617b3ac",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ClientName\",\n    \"job\": \"leader1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authorization",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CommandLine and Jenkins",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WorkspaceDocumentationMonitors",
			"item": [],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}